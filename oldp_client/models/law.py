# coding: utf-8

"""
    Open Legal Data API

    With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website.  # noqa: E501

    OpenAPI spec version: v1
    Contact: hello@openlegaldata.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Law(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'book': 'int',
        'title': 'str',
        'content': 'str',
        'slug': 'str'
    }

    attribute_map = {
        'book': 'book',
        'title': 'title',
        'content': 'content',
        'slug': 'slug'
    }

    def __init__(self, book=None, title=None, content=None, slug=None):  # noqa: E501
        """Law - a model defined in Swagger"""  # noqa: E501

        self._book = None
        self._title = None
        self._content = None
        self._slug = None
        self.discriminator = None

        self.book = book
        if title is not None:
            self.title = title
        if content is not None:
            self.content = content
        self.slug = slug

    @property
    def book(self):
        """Gets the book of this Law.  # noqa: E501

        The book this law belongs to  # noqa: E501

        :return: The book of this Law.  # noqa: E501
        :rtype: int
        """
        return self._book

    @book.setter
    def book(self, book):
        """Sets the book of this Law.

        The book this law belongs to  # noqa: E501

        :param book: The book of this Law.  # noqa: E501
        :type: int
        """
        if book is None:
            raise ValueError("Invalid value for `book`, must not be `None`")  # noqa: E501

        self._book = book

    @property
    def title(self):
        """Gets the title of this Law.  # noqa: E501

        Verbose title of law  # noqa: E501

        :return: The title of this Law.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Law.

        Verbose title of law  # noqa: E501

        :param title: The title of this Law.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 200:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `200`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this Law.  # noqa: E501

        Law content with HTML tags and reference markers (managed by CKEditor)  # noqa: E501

        :return: The content of this Law.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Law.

        Law content with HTML tags and reference markers (managed by CKEditor)  # noqa: E501

        :param content: The content of this Law.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def slug(self):
        """Gets the slug of this Law.  # noqa: E501

        Slug based on section  # noqa: E501

        :return: The slug of this Law.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Law.

        Slug based on section  # noqa: E501

        :param slug: The slug of this Law.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501
        if slug is not None and len(slug) > 200:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `200`")  # noqa: E501
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):  # noqa: E501
            raise ValueError(r"Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")  # noqa: E501

        self._slug = slug

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Law, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Law):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
