# coding: utf-8

"""
    Open Legal Data API

    With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website.  # noqa: E501

    OpenAPI spec version: v1
    Contact: hello@openlegaldata.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CourtMinimal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'slug': 'str',
        'city': 'int',
        'state': 'int',
        'jurisdiction': 'str',
        'level_of_appeal': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'slug': 'slug',
        'city': 'city',
        'state': 'state',
        'jurisdiction': 'jurisdiction',
        'level_of_appeal': 'level_of_appeal'
    }

    def __init__(self, id=None, name=None, slug=None, city=None, state=None, jurisdiction=None, level_of_appeal=None):  # noqa: E501
        """CourtMinimal - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._slug = None
        self._city = None
        self._state = None
        self._jurisdiction = None
        self._level_of_appeal = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.slug = slug
        if city is not None:
            self.city = city
        self.state = state
        if jurisdiction is not None:
            self.jurisdiction = jurisdiction
        if level_of_appeal is not None:
            self.level_of_appeal = level_of_appeal

    @property
    def id(self):
        """Gets the id of this CourtMinimal.  # noqa: E501


        :return: The id of this CourtMinimal.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CourtMinimal.


        :param id: The id of this CourtMinimal.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CourtMinimal.  # noqa: E501

        Full name of the court with location  # noqa: E501

        :return: The name of this CourtMinimal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CourtMinimal.

        Full name of the court with location  # noqa: E501

        :param name: The name of this CourtMinimal.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this CourtMinimal.  # noqa: E501

        Type & city name as lowercase  # noqa: E501

        :return: The slug of this CourtMinimal.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CourtMinimal.

        Type & city name as lowercase  # noqa: E501

        :param slug: The slug of this CourtMinimal.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501
        if slug is not None and len(slug) > 60:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `60`")  # noqa: E501
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):  # noqa: E501
            raise ValueError(r"Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")  # noqa: E501

        self._slug = slug

    @property
    def city(self):
        """Gets the city of this CourtMinimal.  # noqa: E501

        Court belongs to this city, if null court is state-level  # noqa: E501

        :return: The city of this CourtMinimal.  # noqa: E501
        :rtype: int
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CourtMinimal.

        Court belongs to this city, if null court is state-level  # noqa: E501

        :param city: The city of this CourtMinimal.  # noqa: E501
        :type: int
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this CourtMinimal.  # noqa: E501

        Court belongs to this state (derive country of this field)  # noqa: E501

        :return: The state of this CourtMinimal.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CourtMinimal.

        Court belongs to this state (derive country of this field)  # noqa: E501

        :param state: The state of this CourtMinimal.  # noqa: E501
        :type: int
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this CourtMinimal.  # noqa: E501

        Jurisdiction of court (ordinary, civil, ...)  # noqa: E501

        :return: The jurisdiction of this CourtMinimal.  # noqa: E501
        :rtype: str
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this CourtMinimal.

        Jurisdiction of court (ordinary, civil, ...)  # noqa: E501

        :param jurisdiction: The jurisdiction of this CourtMinimal.  # noqa: E501
        :type: str
        """
        if jurisdiction is not None and len(jurisdiction) > 100:
            raise ValueError("Invalid value for `jurisdiction`, length must be less than or equal to `100`")  # noqa: E501

        self._jurisdiction = jurisdiction

    @property
    def level_of_appeal(self):
        """Gets the level_of_appeal of this CourtMinimal.  # noqa: E501

        Subject-matter jurisdiction (local, federal, high court, ...)  # noqa: E501

        :return: The level_of_appeal of this CourtMinimal.  # noqa: E501
        :rtype: str
        """
        return self._level_of_appeal

    @level_of_appeal.setter
    def level_of_appeal(self, level_of_appeal):
        """Sets the level_of_appeal of this CourtMinimal.

        Subject-matter jurisdiction (local, federal, high court, ...)  # noqa: E501

        :param level_of_appeal: The level_of_appeal of this CourtMinimal.  # noqa: E501
        :type: str
        """
        if level_of_appeal is not None and len(level_of_appeal) > 100:
            raise ValueError("Invalid value for `level_of_appeal`, length must be less than or equal to `100`")  # noqa: E501

        self._level_of_appeal = level_of_appeal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourtMinimal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourtMinimal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
