# coding: utf-8

"""
    Open Legal Data API

    With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/  # noqa: E501

    OpenAPI spec version: v1
    Contact: hello@openlegaldata.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LawBook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'title': 'str',
        'revision_date': 'date',
        'latest': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'title': 'title',
        'revision_date': 'revision_date',
        'latest': 'latest'
    }

    def __init__(self, code=None, title=None, revision_date=None, latest=None):  # noqa: E501
        """LawBook - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._title = None
        self._revision_date = None
        self._latest = None
        self.discriminator = None

        self.code = code
        if title is not None:
            self.title = title
        if revision_date is not None:
            self.revision_date = revision_date
        if latest is not None:
            self.latest = latest

    @property
    def code(self):
        """Gets the code of this LawBook.  # noqa: E501

        Book code (usually short title)  # noqa: E501

        :return: The code of this LawBook.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LawBook.

        Book code (usually short title)  # noqa: E501

        :param code: The code of this LawBook.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if code is not None and len(code) > 100:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `100`")  # noqa: E501

        self._code = code

    @property
    def title(self):
        """Gets the title of this LawBook.  # noqa: E501

        Full title of the book  # noqa: E501

        :return: The title of this LawBook.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LawBook.

        Full title of the book  # noqa: E501

        :param title: The title of this LawBook.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 250:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `250`")  # noqa: E501

        self._title = title

    @property
    def revision_date(self):
        """Gets the revision_date of this LawBook.  # noqa: E501

        Date of revision  # noqa: E501

        :return: The revision_date of this LawBook.  # noqa: E501
        :rtype: date
        """
        return self._revision_date

    @revision_date.setter
    def revision_date(self, revision_date):
        """Sets the revision_date of this LawBook.

        Date of revision  # noqa: E501

        :param revision_date: The revision_date of this LawBook.  # noqa: E501
        :type: date
        """

        self._revision_date = revision_date

    @property
    def latest(self):
        """Gets the latest of this LawBook.  # noqa: E501

        Is true if this is the latest revision of this book  # noqa: E501

        :return: The latest of this LawBook.  # noqa: E501
        :rtype: bool
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this LawBook.

        Is true if this is the latest revision of this book  # noqa: E501

        :param latest: The latest of this LawBook.  # noqa: E501
        :type: bool
        """

        self._latest = latest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LawBook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LawBook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
